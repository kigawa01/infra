name: Terraform Apply

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to apply (dev/staging/prod)'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod
      auto_approve:
        description: 'Auto approve terraform apply'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: "1.5.7"

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get SSH private key from Bitwarden Secrets Manager
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BW_ACCESS_TOKEN }}
          base_url: https://vault.bitwarden.com
          secrets: |
            ${{ secrets.BW_SSH_KEY_GUID }} > SSH_PRIVATE_KEY

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "auto_approve=${{ github.event.inputs.auto_approve }}" >> $GITHUB_OUTPUT
          else
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "auto_approve=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Create environment directory and tfvars
        run: |
          mkdir -p environments/${{ steps.set-env.outputs.environment }}
          echo "${{ secrets.TERRAFORM_ENV }}" > environments/${{ steps.set-env.outputs.environment }}/terraform.tfvars

      - name: Terraform Init
        run: |
          ./terraform.sh init ${{ steps.set-env.outputs.environment }}

      - name: Terraform Validate
        run: |
          ./terraform.sh validate ${{ steps.set-env.outputs.environment }}

      - name: Terraform Plan
        run: |
          ./terraform.sh plan ${{ steps.set-env.outputs.environment }} -var="environment=${{ steps.set-env.outputs.environment }}" -out=tfplan

      - name: Terraform Apply (with approval)
        if: steps.set-env.outputs.auto_approve == 'false'
        run: |
          ./terraform.sh apply ${{ steps.set-env.outputs.environment }} tfplan

      - name: Terraform Apply (auto-approve)
        if: steps.set-env.outputs.auto_approve == 'true'
        run: |
          ./terraform.sh apply ${{ steps.set-env.outputs.environment }} -var="environment=${{ steps.set-env.outputs.environment }}" -auto-approve

      - name: Output summary
        if: always()
        run: |
          echo "## Terraform Apply Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ steps.set-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto Approve:** ${{ steps.set-env.outputs.auto_approve }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
